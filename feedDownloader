#!/usr/bin/perl -w
use strict;
use warnings;
use Data::Dumper;
use File::HomeDir ();
use Config::Tiny;
use XML::Feed;
use File::Spec;
use Getopt::Long;
use LWP::UserAgent;
use Cache::File;
use Cache;


my $cache = Cache::File->new( cache_root => '/tmp/feedDownloader', default_expires => '10 min' );

my ($debug, $configFile);
$debug = 1 if $ENV{VIM};

GetOptions (
    "config=s"   => \$configFile,      # string
    "debug"      => \$debug
);  # flag

# Open the config
$configFile ||= File::Spec->catdir( File::HomeDir->my_home,'.feedDownloader');
my $config = -e $configFile ? Config::Tiny->read( $configFile ) : Config::Tiny->new($configFile);
die("Unable to load config file: $configFile") unless $config;
my $configFileHasChanged = 0;

my $ua = LWP::UserAgent->new;
$ua->agent("feedDownloader/0.1 ");
# force allowing of proxies
$ua->env_proxy;


sub debug 
{
    return unless $config->{'main'}->{'debug'} || $debug;
    print STDERR sprintf shift, @_;
    print STDERR "\n";
}

sub buildFilters
{
    my ($area) = @_;

    my @filters = map { 
        my ($id) = $_ =~ m/(\d+)$/;
        { key => $_, seenKey => "seen$id", filter => $config->{$area}->{$_} }
    } grep { /^filter\d+$/ } keys %{$config->{$area}};
    return @filters;
}

sub getFile
{
    my ($url, $outputFilename, $referer) = @_;

    my $req = HTTP::Request->new(GET => $url);
    # Pass request to the user agent and get a response back
    my $res = $ua->request($req);

    die($res->content . "--- for $url") if (!$res->is_success);

    my $filename = File::Spec->catdir($config->{'main'}->{'downloadDir'}, $outputFilename);
    open(FILE, ">", $filename)
        or die("unable to open $filename for writing: $!");
    binmode(FILE);
    print FILE $res->content;
    close FILE
        or die("Unable to close $filename: $!");
}

sub getFilter
{
    my ($title, @filters) = @_;
    foreach (@filters)
    {
        my (@parts) = $title =~ $_->{filter};
        next unless @parts;
        return $_->{seenKey}, @parts;
    }
    return (undef, undef, undef);
}


my @keys = @ARGV;
@keys = grep { /^url\d+$/ } keys %{$config->{'main'}} unless @keys;
foreach  (@keys)
{
    my $configArea = $_;
    my @urls = $config->{'main'}->{$_};
    push @urls, map { $config->{'main'}->{$_} } grep { 
        /^$configArea\.mirror\d+$/ }
    keys %{$config->{'main'}};

    my $feed;
    my @errors;

    debug("[urls] %s -- %s", $configArea, Data::Dumper::Dumper(\@urls));
    foreach my $url (@urls)
    {
        debug( "[url] %s|%s)", $url, $configArea);
        my $content = $cache->get( $configArea );
        if (!$content)
        {
            debug("[fetchUrl] %s", $url);
            my $req = HTTP::Request->new(GET => $url);
            # Pass request to the user agent and get a response back
            my $res = $ua->request($req);

            if (!$res->is_success) 
            {
                push @errors, "$url - " . $res->content;
                next;
            }

            $content = $res->content;
            $cache->set($configArea, $content);
        }
        $feed = XML::Feed->parse(\$content);
        if (!$feed)
        {
            push @errors, "$url - " . XML::Feed->errstr;
            next;
        }
        last;
    }


    if (!$feed)
    {
        print Data::Dumper::Dumper(\@errors);
        next;
    }

    debug($feed->title);
    
    my @filters = buildFilters($configArea);
    for my $entry ($feed->entries) 
    {
        my $title = $entry->title;
        $title =~ s/^\s*eztv_it:\s*//;
        debug("[loop-title] %s",  $title);
        my ($seenKey, @parts) = getFilter($title, @filters);
        next unless defined $seenKey;
        debug("[loop-foundMatch] %s - %s", $seenKey, $title);

        if ( @parts && defined $parts[0] )
        {
            ### Set a default
            $config->{$configArea}->{$seenKey} ||= '0|0';

            ### Strip out anything that isn't numeric
            foreach (@parts)
            {
                s/([^[:digit:]]*)//g;
            }

            # Retrieve old values
            my $seenInfo = join('', map { sprintf("%04d", $_) } split('\|', $config->{$configArea}->{$seenKey}));
            my $newInfo = join('', map { sprintf("%04d", $_) } @parts);

            # skip if already seen
            debug("[loop-epMtch] skip if %s >= %s = %s", $seenInfo, $newInfo, $seenInfo >= $newInfo ? 1 : 0);
            next if ($seenInfo >= $newInfo);
            $configFileHasChanged = 1;
            $config->{$configArea}->{$seenKey} = join('|', @parts);
        }
        $title =~ s/\W/_/g;
        my $link = $entry->link;
        if (my $rewrite = $config->{$configArea}->{urlRewrite})
        {
            eval("\$link =~ $rewrite");
            warn("Unable to rewrite $link: $@") if $@;
        }
        if (my $regex = $config->{$configArea}->{urlFromContent})
        {
            my $req = HTTP::Request->new(GET => $entry->link);
            my $res = $ua->request($req);
            if (!$res->is_success())
            {
                warn("Unable to get link: " . $res->decoded_content);
                next;
            }
            ($link) = $res->decoded_content =~ qr/$regex/;
            if ($link && $link !~ m{://})
            {
                my $url = URI->new($entry->link);
                print "$url $link\n";
                $url->path_query($link);
                print "$url $link\n";
                $link = $url->as_string;
            }
            if (!$link)
            {
                print Dumper($res->decoded_content);
            }
        }
        if ($link)
        {
            debug("[loop-link] %s => %s", $entry->link, $link);

            my $filename = $title;
            if ($config->{$configArea}->{forceExtension})
            {
                $filename .= $config->{$configArea}->{forceExtension} 
            }
            else
            {
                $filename = File::Basename::basename($link);
            }
            getFile($link, $filename);
        }
    }
}

$config->write($configFile) if ($configFileHasChanged);

